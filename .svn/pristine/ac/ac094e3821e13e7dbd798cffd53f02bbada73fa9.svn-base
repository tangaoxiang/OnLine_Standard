using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Text;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using DigiPower.Onlinecol.Standard.BLL;
using DigiPower.Onlinecol.Standard.CBLL;
using DigiPower.Onlinecol.Standard.Common;
using DigiPower.Onlinecol.Standard.Model;

namespace DigiPower.Onlinecol.Standard.Web.SuppleMent
{
    public partial class SmZJList : PageBase
    {
        private string ProjectName = "";
        private T_SingleProject_BLL spBLL = new T_SingleProject_BLL();
        private T_FileList_BLL flBLL = new T_FileList_BLL();
        private T_Archive_BLL acBLL = new T_Archive_BLL();

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                SingleProjectID.Value = DNTRequest.GetQueryString("SingleProjectID");

                //初始化下拉框
                boxType.DataBindEx();
                ajlx.DataBindEx();

                BindFileList();
                BindTreeYZJ();//绑定已组卷Tree
            }
            //TreeView2.Attributes.Add("OnCheck", "CheckNode(this)");
            //TreeView2.Attributes.Add("onclick", "CheckNode(this.SelectedNode)");
        }

        //自动填入编制单位等信息
        private void InputText()
        {
            lrr.Text = Common.Session.GetSession("Username");
            bzdw.Text = Common.Session.GetSession("CompanyName");
            lrsj.Text = DateTime.Now.ToShortDateString();

            T_SingleProject_BLL spBLL = new T_SingleProject_BLL();
            T_FileList_BLL flBLL = new T_FileList_BLL();
            DataSet dsproject = new DataSet();
            dsproject = spBLL.GetList("SingleProjectID=" + SingleProjectID.Value);

            if (dsproject.Tables.Count > 0 && dsproject.Tables[0].Rows.Count > 0)
            {
                ProjectName = dsproject.Tables[0].Rows[0]["gcmc"].ToString();
                ltGcmc.Text = ProjectName;
                //ajtm.Text = Common.Session.GetSession("CompanyName") + ProjectName;
                BLL.T_Other_BLL otherBLL = new T_Other_BLL();
                string JSDW = otherBLL.GetCompanyNameBySingleProjectID(SingleProjectID.Value);

                bzdw.Text = JSDW;
                ajtm.Text = JSDW + ProjectName;

                string strSql = "SingleProjectID=" + SingleProjectID.Value;//已组卷
                DataSet dsArchive = new DataSet();
                dsArchive = acBLL.GetList(strSql);
                if (dsArchive.Tables[0].Rows.Count > 0)
                {
                    xh.Text = (dsArchive.Tables[0].Rows.Count + 1).ToString();
                }
                else
                {
                    xh.Text = "1";
                }
            }
        }

        //绑定归档目录
        private void BindFileList()
        {
            BLL.T_SingleProject_BLL spBLL = new T_SingleProject_BLL();
            Model.T_SingleProject_MDL spMDL = spBLL.GetModel(Common.ConvertEx.ToInt(SingleProjectID.Value));

            //取当前工程的所有归档目录
            string strWhere = "SingleProjectID=" + SingleProjectID.Value;
            DataSet ds = (new T_FileList_BLL()).GetList(strWhere);

            //strWhere += " AND Status<>100 AND ManualCount>0";//Status==100表示已组卷,以手动页数为主
            //DataSet ds = (new T_FileList_BLL()).GetList(strWhere);

            if (ds.Tables.Count > 0)
            {
                strWhere = "1=1";

                DataTable outDT = ds.Tables[0].Copy();
                outDT.Clear();
                Recursion(ds.Tables[0], 0, 0, ref outDT);
                ds.Tables.Clear();
                ds.Tables.Add(outDT);

                if (Common.Session.GetSession("SuperAdmin").ToLower() == "true" || Common.Session.GetSession("IsCompany") == false.ToString().ToLower())
                {//Leo 超级管理员看全部                
                }
                else if (spMDL != null && spMDL.CompanyUserID == Common.ConvertEx.ToInt(Common.Session.GetSession("UserID")))
                {//Leo 工程管理员也看全部,档案馆的人也可以看全部
                }
                else
                {
                    strWhere += " and operateuserid=" + Common.Session.GetSession("UserID");
                }

                //Status==100表示已组卷,以手动页数为主   此新增是由档案馆来做的,所以 都是需要提交归档的. ManualCount 实体页数等组卷完成后,在文件著录信息中修改
                //  strWhere += " AND (IsFolder=1 OR (IsFolder=0 AND MustSubmitFlag=1 AND Status<>100 AND ManualCount>0)) ";
                strWhere += " AND (IsFolder=1 OR (IsFolder=0 AND MustSubmitFlag=1 AND Status<>100 )) ";
                if (strWhere != "1=1")
                {
                    //过滤一些不要的
                    DataView dv = ds.Tables[0].Copy().DefaultView;
                    dv.RowFilter = strWhere;
                    if (dv.Count != ds.Tables[0].Rows.Count)
                    {
                        ds.Tables[0].Clear();
                        ds.Tables.RemoveAt(0);
                        ds.Tables.Add(dv.ToTable());
                    }
                }

                //dsarchive = (new T_FileList_BLL()).GetClientList(strWhere);
                TreeNode tNode1 = new TreeNode();
                tNode1.Text = "未组卷文件列表：" + ProjectName;// "工程名称";
                tNode1.Value = "0";

                DsToTreeNode(ds.Tables[0], 0, tNode1);
                TreeView1.Nodes.Clear();
                TreeView1.Nodes.Add(tNode1);
                TreeView1.ExpandDepth = 1;
            }

            //自动填入相关信息
            InputText();
        }

        private void BindTreeYZJ()
        {
            //已组卷
            string strSql = "SingleProjectID=" + SingleProjectID.Value;//已组卷
            DataSet dsArchive = new DataSet();

            TreeNode tNode2 = new TreeNode();
            tNode2.Text = "已组卷档案列表：" + ProjectName;
            tNode2.Value = "0";
            dsArchive = acBLL.GetList(strSql);
            if (dsArchive.Tables[0].Rows.Count > 0)
            {
                int iIndex = 1;//显示顺序
                foreach (DataRow dr in dsArchive.Tables[0].Rows)
                {
                    BLL.T_FileList_BLL fileListBLL = new T_FileList_BLL();
                    string ajFileCount = fileListBLL.GetPageCountByArchiveID(dr["ArchiveID"].ToString().Trim());
                    TreeNode tNodeAJ = new TreeNode(iIndex + "、" + dr["ajtm"].ToString().Trim() + "(" + ajFileCount + ")", dr["ArchiveID"].ToString());//添加案卷信息
                    iIndex++;
                    string strArchive = "a.ArchiveID=" + Common.ConvertEx.ToInt(dr["ArchiveID"].ToString())
                                   + " and b.SingleProjectID=" + SingleProjectID.Value + " and b.Status='100' ";
                    DataSet dsWJinfo = new DataSet();
                    //dsWJinfo = flToacBLL.GetFileListByArchiveID(strArchive);
                    dsWJinfo = flBLL.GetList("ArchiveID=" + dr["ArchiveID"].ToString());
                    if (dsWJinfo.Tables[0].Rows.Count > 0)
                    {
                        foreach (DataRow drwj in dsWJinfo.Tables[0].Rows)
                        {
                            TreeNode tNodeWJ = new TreeNode(drwj["title"].ToString().Trim() + "(" + drwj["ManualCount"].ToString() + ")", drwj["FileListID"].ToString());
                            tNodeAJ.ChildNodes.Add(tNodeWJ);
                        }
                    }
                    tNode2.ChildNodes.Add(tNodeAJ);
                }
            }
            TreeView2.Nodes.Clear();
            TreeView2.Nodes.Add(tNode2);
            TreeView2.ExpandDepth = 1;
        }

        private void DsToTreeNode(DataTable dt, int PID, TreeNode pNode)
        {//如果无子项，不要显示出来。
            DataRow[] dr = dt.Select("PID='" + PID + "'");
            foreach (DataRow drr in dr)
            {
                string NewTitle = drr["title"] + "(" + drr["ManualCount"] + ")";
                if (Common.ConvertEx.ToBool(drr["IsFolder"]) == true)
                {//求子项总数，drr["ManualCount"]==0的，需要计算
                    int ManualCount = GetPageCountByPID(dt, Common.ConvertEx.ToInt(drr["recID"].ToString()));
                    NewTitle = drr["title"] + "(" + ManualCount + ")";
                }
                TreeNode tNode = new TreeNode(NewTitle.Trim(), drr["FileListID"].ToString());
                DsToTreeNode(dt, Int32.Parse(drr["recid"].ToString()), tNode);
                if (tNode.ChildNodes.Count <= 0 && Common.ConvertEx.ToBool(drr["IsFolder"]) == true)
                {
                    continue;
                }
                pNode.ChildNodes.Add(tNode);
            }
        }

        private int GetPageCountByPID(DataTable dt, int PID)
        {
            int ManualCount = 0;
            DataRow[] dr = dt.Select("PID='" + PID + "'");
            foreach (DataRow drr in dr)
            {
                if (Common.ConvertEx.ToBool(drr["IsFolder"]) == true)
                {
                    ManualCount += Common.ConvertEx.ToInt(GetPageCountByPID(dt, Common.ConvertEx.ToInt(drr["recID"].ToString())));
                }
                else
                {
                    ManualCount += Common.ConvertEx.ToInt(drr["ManualCount"].ToString());
                }
            }
            return ManualCount;
        }

        private void Recursion(DataTable dt, int PID, int LevelID, ref DataTable outDT)
        {
            DataRow[] dr = dt.Select("PID='" + PID + "'", "OrderIndex");
            foreach (DataRow drr in dr)
            {
                drr["title"] = Comm.AddEmpty(drr["title"].ToString().Trim(), LevelID);
                outDT.Rows.Add(drr.ItemArray);

                int NewLevelID = LevelID + 1;
                Recursion(dt, Int32.Parse(drr["recid"].ToString()), NewLevelID, ref outDT);
            }
        }

        protected void btnAdd_Click(object sender, EventArgs e)
        {
            string selIDList = GetTreeViewChecked(TreeView1.Nodes);
            if (selIDList.Length > 1)
            {
                selIDList = selIDList.Remove(selIDList.Length - 1);
                DoZJ("2", selIDList);
            }
        }


        private string GetTreeViewChecked(TreeNodeCollection pNodeList)
        {
            string outString = "";
            foreach (TreeNode pNode in pNodeList)
            {
                if (pNode.Checked == true)
                {
                    outString += pNode.Value + ",";
                }

                outString += GetTreeViewChecked(pNode.ChildNodes);
            }
            return outString;
        }
        /// <summary>
        /// Flag=2表示按所选节点组卷,1,自动组卷,3加入到指定案卷
        /// </summary>
        /// <param name="flag"></param>
        /// <param name="selId"></param>
        private void DoZJ(string flag, string selId)
        {
            string strWhere = "SingleProjectID=" + SingleProjectID.Value + "and status<>100";
            if (flag == "2" || flag == "3")
                strWhere += " and FileListID in (" + selId + ")";
            DataSet dsFileList = flBLL.GetList(strWhere);
            int ArchiveID = 0;
            int ManualCountTotal = 0;
            if (flag == "3")
            {
                if (TreeView2.Nodes[0].ChildNodes.Count > 0)
                {
                    foreach (TreeNode tNode in TreeView2.Nodes[0].ChildNodes)
                    {
                        if (tNode.Checked)//选中案卷
                        {
                            int tArchiveID = Common.ConvertEx.ToInt(tNode.Value.ToString());
                            Model.T_Archive_MDL acMDL = acBLL.GetModel(tArchiveID);
                            if (acMDL != null)
                            {
                                ArchiveID = acMDL.ArchiveID;
                                ManualCountTotal = acMDL.sl;
                            }
                        }
                    }
                    if (ArchiveID == 0)
                    {
                        MessageBox.Show(this, "请勾选右边的需加入的案卷！");
                        return;
                    }
                }
                else
                {
                    MessageBox.Show(this, "请勾选右边的需加入的案卷！");
                    return;
                }
            }

            if (dsFileList.Tables.Count > 0 && dsFileList.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < dsFileList.Tables[0].Rows.Count; i++)
                {
                    string bIsFolder = dsFileList.Tables[0].Rows[i]["IsFolder"].ToString();

                    //为目录的数据不处理，跳到下一条
                    if (bIsFolder == "True")
                        continue;
                    else
                    {
                        //string alongarchive = dsFileList.Tables[0].Rows[i]["AlonePack"].ToString();
                        //int pagescount = ConvertEx.ToInt(dsFileList.Tables[0].Rows[i]["pagescount"].ToString());
                        int ManualCount = ConvertEx.ToInt(dsFileList.Tables[0].Rows[i]["ManualCount"].ToString());
                        int FileListID = ConvertEx.ToInt(dsFileList.Tables[0].Rows[i]["FileListID"].ToString());
                        //int boxpage = ConvertEx.ToInt(boxType.SelectValue);

                        if (ArchiveID == 0)
                        {//在这里创建案卷
                            ArchiveID = CreateAj();
                        }
                        //inboxpage = inboxpage + ManualCount;//将当前目录装盒
                        //T_FileToArchive_MDL flToacMDL = new T_FileToArchive_MDL();
                        //ManualCountTotal += ManualCount;
                        //flToacMDL.FileListID = FileListID;
                        //flToacMDL.ArchiveID = ArchiveID;
                        //flToacBLL.Add(flToacMDL);

                        //sql = "update t_archivelist set OldStatus=status,status=100 where SingleProjectID=" + SingleProjectID.Value + " and archivelistid in (" + selId + ")";
                        //archivelistbll.ExcuteSql(sql);
                        Model.T_FileList_MDL flMDL = flBLL.GetModel(FileListID);
                        flMDL.ArchiveID = ConvertEx.ToInt(ArchiveID);
                        flMDL.OldStatus = flMDL.Status;
                        flMDL.Status = "100";
                        flBLL.Update(flMDL);
                    }
                }
                if (ArchiveID > 0)
                {
                    Model.T_Archive_MDL acMDL = acBLL.GetModel(ArchiveID);
                    acMDL.sl = ManualCountTotal;
                    acBLL.Update(acMDL);
                }

                //Leo 记录处理结果，及处理时间
                //Model.T_WorkFlowDoResult_MDL doResultMDL = new T_WorkFlowDoResult_MDL();
                ////doResultMDL.SingleProjectID = Common.ConvertEx.ToInt(SingleProjectID.Value);
                ////doResultMDL.WorkFlowID = Common.ConvertEx.ToInt(workflowid.Value);
                //doResultMDL.DoUserID = Common.ConvertEx.ToInt(Common.Session.GetSession("UserID"));
                ////doResultMDL.DoUserName = Common.Session.GetSession("UserName");
                //doResultMDL.DoDateTime = System.DateTime.Now;
                ////doResultMDL.DoFinishFlag = true;
                //BLL.T_WorkFlowDoResult_BLL doResultBLL = new T_WorkFlowDoResult_BLL();
                //doResultBLL.Add(doResultMDL);
                Response.Redirect("SmZJList.aspx?SingleProjectID=" + SingleProjectID.Value);
            }
            //ClientScript.RegisterStartupScript(this.GetType(), "", "<script type=\"text/javascript\">reloadopener();</script>");            
        }


        /// <summary>
        /// 递归查找上级目录名称
        /// </summary>
        /// <param name="title">本级title</param>
        /// <param name="recid">本级pid</param>
        /// <returns></returns>
        //private string GetTitle(string recid)
        //{
        //    string strwhere = "recid=" + recid + " and SingleProjectID=" + SingleProjectID.Value;
        //    DataSet ds = flBLL.GetList(strwhere);
        //    string Title = "";
        //    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        //    {
        //        Title = ds.Tables[0].Rows[0]["title"].ToString();
        //        string tTitle = GetTitle(ds.Tables[0].Rows[0]["pid"].ToString());
        //        if (tTitle != "")
        //        {
        //            Title = tTitle + "_" + Title;
        //        }
        //    }
        //    return Title;
        //}

        /// <summary>
        /// 生成案卷
        /// </summary>
        /// <param name="tm">题名</param>
        /// <param name="pages">页数</param>
        /// <param name="xh">序号</param>
        private int CreateAj()
        {
            T_Archive_MDL model = new T_Archive_MDL();
            model.ajtm = ajtm.Text;//ProjectName + tm + "第" + ajno + "卷";
            //model.sl = pages;//后来更新的
            //model.mj = mj.SelectValue;
            model.bzdw = bzdw.Text;
            model.lrr = lrr.Text;
            model.lrsj = ConvertEx.ToDate(lrsj.Text);
            //model.bgqx = bgqx.SelectValue;
            model.ajlx = ajlx.SelectValue;
            model.qssj = DateTime.Now;
            model.zzsj = DateTime.Now;
            //model.area_code = Common.Session.GetSession("area_code");
            model.SingleProjectID = Common.ConvertEx.ToInt(SingleProjectID.Value);
            model.xh = Common.ConvertEx.ToInt(xh.Text);
            model.note = note.Text;

            model.bgqx = "31";
            model.mj = "25";

            BLL.T_SingleProject_BLL projBLL = new T_SingleProject_BLL();
            Model.T_SingleProject_MDL projMDL = projBLL.GetModel(Common.ConvertEx.ToInt(SingleProjectID.Value));

            model.dh = projMDL.zdh.Substring(0, 1) + projMDL.gcbm + "-" + model.xh;
            return acBLL.Add(model);
        }

        /// <summary>
        /// 拆卷
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void Linkbutton1_Click(object sender, EventArgs e)//拆卷
        {
            if (TreeView2.Nodes[0].ChildNodes.Count > 0)
            {
                foreach (TreeNode tNode in TreeView2.Nodes[0].ChildNodes)
                {
                    int iCount = 0;
                    if (tNode.Checked)//选中案卷
                    {
                        string ArchiveID = tNode.Value.ToString();

                        foreach (TreeNode tNode1 in tNode.ChildNodes)
                        {
                            if (tNode1.Checked)
                            {
                                iCount++;
                                int FileListID = Common.ConvertEx.ToInt(tNode1.Value.ToString());
                                //flToacBLL.Delete("ArchiveID=" + ArchiveID + " AND FileListID=" + FileListID);
                                //tNode.ChildNodes.Remove(tNode1);

                                Model.T_FileList_MDL flMDL = flBLL.GetModel(FileListID);
                                flMDL.Status = flMDL.OldStatus;
                                flMDL.ArchiveID = 0;//拆卷,则将文件对应的案卷设置为0
                                flBLL.Update(flMDL);
                            }
                        }
                    }
                    //if (tNode.ChildNodes.Count == iCount && iCount > 0)
                    //flBLL.GetList("ArchiveID".
                    if (tNode.ChildNodes.Count == iCount)//==0为空卷，直接删掉
                    {
                        string ArchiveID = tNode.Value.ToString();
                        acBLL.Delete(Common.ConvertEx.ToInt(ArchiveID));
                    }
                }
                //BindFileList();
                Response.Redirect("SmZJList.aspx?SingleProjectID=" + SingleProjectID.Value);
            }
        }

        /// <summary>
        /// 加入到指定案卷
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnUpdate003_Click(object sender, EventArgs e)
        {
            string selIDList = GetTreeViewChecked(TreeView1.Nodes);
            if (selIDList.Length > 1)
            {
                selIDList = selIDList.Remove(selIDList.Length - 1);
                DoZJ("3", selIDList);
            }
        }

        /// <summary>
        /// 重新加载
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void btnRefresh_Click(object sender, EventArgs e)
        {
            BindFileList();
            BindTreeYZJ();
        }
    }
}