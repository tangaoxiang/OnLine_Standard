using System;
using System.Data;
using System.Collections.Generic;
using LTP.Common;
using DigiPower.Onlinecol.Standard.Model;
namespace DigiPower.Onlinecol.Standard.BLL
{
    /// <summary>
    /// 业务逻辑类T_Module_BLL 的摘要说明。
    /// </summary>
    public class T_Module_BLL
    {
        private readonly DigiPower.Onlinecol.Standard.DAL.T_Module_DAL dal = new DigiPower.Onlinecol.Standard.DAL.T_Module_DAL();
        public T_Module_BLL()
        { }
        #region  成员方法

        /// <summary>
        /// 得到最大ID
        /// </summary>
        public int GetMaxId()
        {
            return dal.GetMaxId();
        }

        /// <summary>
        /// 是否存在该记录
        /// </summary>
        public bool Exists(int ModuleID)
        {
            return dal.Exists(ModuleID);
        }

        /// <summary>
        /// 增加一条数据
        /// </summary>
        public int Add(DigiPower.Onlinecol.Standard.Model.T_Module_MDL model)
        {
            return dal.Add(model);
        }

        /// <summary>
        /// 更新一条数据
        /// </summary>
        public void Update(DigiPower.Onlinecol.Standard.Model.T_Module_MDL model)
        {
            dal.Update(model);
        }

        /// <summary>
        /// 删除一条数据
        /// </summary>
        public void Delete(int ModuleID)
        {
            dal.Delete(ModuleID);
        }

        /// <summary>
        /// 得到一个对象实体
        /// </summary>
        public DigiPower.Onlinecol.Standard.Model.T_Module_MDL GetModel(int ModuleID)
        {

            return dal.GetModel(ModuleID);
        }

        /// <summary>
        /// 得到一个对象实体，从缓存中。
        /// </summary>
        public DigiPower.Onlinecol.Standard.Model.T_Module_MDL GetModelByCache(int ModuleID)
        {

            string CacheKey = "T_Module_MDLModel-" + ModuleID;
            object objModel = LTP.Common.DataCache.GetCache(CacheKey);
            if (objModel == null)
            {
                try
                {
                    objModel = dal.GetModel(ModuleID);
                    if (objModel != null)
                    {
                        int ModelCache = LTP.Common.ConfigHelper.GetConfigInt("ModelCache");
                        LTP.Common.DataCache.SetCache(CacheKey, objModel, DateTime.Now.AddMinutes(ModelCache), TimeSpan.Zero);
                    }
                }
                catch { }
            }
            return (DigiPower.Onlinecol.Standard.Model.T_Module_MDL)objModel;
        }

        /// <summary>
        /// 获得数据列表
        /// </summary>
        public DataSet GetList(string strWhere)
        {
            return dal.GetList(strWhere);
        }
        /// <summary>
        /// 获得前几行数据
        /// </summary>
        public DataSet GetList(int Top, string strWhere, string filedOrder)
        {
            return dal.GetList(Top, strWhere, filedOrder);
        }
        /// <summary>
        /// 获得数据列表
        /// </summary>
        public List<DigiPower.Onlinecol.Standard.Model.T_Module_MDL> GetModelList(string strWhere)
        {
            DataSet ds = dal.GetList(strWhere);
            return DataTableToList(ds.Tables[0]);
        }
        /// <summary>
        /// 获得数据列表
        /// </summary>
        public List<DigiPower.Onlinecol.Standard.Model.T_Module_MDL> DataTableToList(DataTable dt)
        {
            List<DigiPower.Onlinecol.Standard.Model.T_Module_MDL> modelList = new List<DigiPower.Onlinecol.Standard.Model.T_Module_MDL>();
            int rowsCount = dt.Rows.Count;
            if (rowsCount > 0)
            {
                DigiPower.Onlinecol.Standard.Model.T_Module_MDL model;
                for (int n = 0; n < rowsCount; n++)
                {
                    model = new DigiPower.Onlinecol.Standard.Model.T_Module_MDL();
                    if (dt.Rows[n]["ModuleID"].ToString() != "")
                    {
                        model.ModuleID = int.Parse(dt.Rows[n]["ModuleID"].ToString());
                    }
                    if (dt.Rows[n]["ParentID"].ToString() != "")
                    {
                        model.ParentID = int.Parse(dt.Rows[n]["ParentID"].ToString());
                    }
                    model.BH = dt.Rows[n]["BH"].ToString();
                    model.ModuleName = dt.Rows[n]["ModuleName"].ToString();
                    if (dt.Rows[n]["PictureIndex"].ToString() != "")
                    {
                        model.PictureIndex = int.Parse(dt.Rows[n]["PictureIndex"].ToString());
                    }
                    if (dt.Rows[n]["SelectedIndex"].ToString() != "")
                    {
                        model.SelectedIndex = int.Parse(dt.Rows[n]["SelectedIndex"].ToString());
                    }
                    model.FileName = dt.Rows[n]["FileName"].ToString();
                    if (dt.Rows[n]["IfVisible"].ToString() != "")
                    {
                        if ((dt.Rows[n]["IfVisible"].ToString() == "1") || (dt.Rows[n]["IfVisible"].ToString().ToLower() == "true"))
                        {
                            model.IfVisible = true;
                        }
                        else
                        {
                            model.IfVisible = false;
                        }
                    }
                    if (dt.Rows[n]["OrderIndex"].ToString() != "")
                    {
                        model.OrderIndex = int.Parse(dt.Rows[n]["OrderIndex"].ToString());
                    }
                    model.Description = dt.Rows[n]["Description"].ToString();
                    if (dt.Rows[n]["Del"].ToString() != "")
                    {
                        if ((dt.Rows[n]["Del"].ToString() == "1") || (dt.Rows[n]["Del"].ToString().ToLower() == "true"))
                        {
                            model.Del = true;
                        }
                        else
                        {
                            model.Del = false;
                        }
                    }
                    modelList.Add(model);
                }
            }
            return modelList;
        }

        /// <summary>
        /// 获得数据列表
        /// </summary>
        public DataSet GetAllList()
        {
            return GetList("");
        }

        /// <summary>
        /// 获得数据列表
        /// </summary>
        //public DataSet GetList(int PageSize,int PageIndex,string strWhere)
        //{
        //return dal.GetList(PageSize,PageIndex,strWhere);
        //}

        #endregion  成员方法

        public DataSet GetListByRole(string strWhere)
        {
            DataSet ds1 = new DataSet();
            dal.GetListByRole(ds1, "0", strWhere);
            return ds1;
        }

        public void DeleteNoUse(string ParentID)
        {
            DataSet ds1 = dal.GetList("ParentID=" + ParentID);
            foreach (DataRow row in ds1.Tables[0].Rows)
            {
                if (ParentID == "0" && row["IfVisible"].ToString().ToLower() == "false")
                {
                    DeleteNoUse(row["ModuleID"].ToString());
                }
                else if (ParentID != "0")
                {
                    DeleteNoUse(row["ModuleID"].ToString());

                    dal.DeleteNoUse(row["ModuleID"].ToString());
                }
            }
        }

        public string GetModelNameListByURL(string URL)
        {
            return dal.GetModelNameListByURL(URL);
        }

        public string GetModelIDByURL(string URL)
        {
            int iPosition = URL.IndexOf("//");
            if (iPosition > 0)
            {
                int iPosition2 = URL.IndexOf("/", iPosition + 2);
                if (iPosition2 > iPosition)
                {
                    int iPosition3 = URL.IndexOf(".aspx", iPosition2);
                    if (iPosition3 > iPosition2)
                    {
                        URL = URL.Substring(iPosition2 + 1, iPosition3 - iPosition2 + 4);
                    }
                }
            }
            return dal.GetModelIDByURL(URL);
        }

        /// <summary>
        /// 返回模块列表 
        /// </summary>
        /// <returns></returns>
        public DataTable GetCustomModuleList()
        {
            return dal.GetCustomModuleList();
        }
    }
}